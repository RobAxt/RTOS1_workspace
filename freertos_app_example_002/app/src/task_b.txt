/* Task B Flag */
bool task_b_flag;

const char *p_task_b_wait_exit_b		= "  ==> Task    B - Wait:   Exit";
const char *p_task_a_signal_continue_b	= "  ==> Task    B - Signal: Continue ==>";

const char *p_task_b_wait_mutex			= "  ==> Task    B - Wait:   Mutex";
const char *p_task_b_signal_mutex		= "  ==> Task    B - Signal: Mutex    ==>";

const char *p_task_b_g_tasks_cnt		= "  <=> Task    B - g_tasks_cnt :";

    /* Reset Task B Flag */
    task_b_flag = false;

	xSemaphoreTake(h_exit_bin_sem, (portTickType) 0);

		/* Print out: Wait Exit */
		LOGGER_LOG("  %s\r\n", p_task_b_wait_exit_b);
		xSemaphoreTake(h_exit_bin_sem, portMAX_DELAY);

		/* Print out: Signal Continue */
		LOGGER_LOG("  %s\r\n", p_task_a_signal_continue_b);
		xSemaphoreGive(h_continue_bin_sem);

		/* Print out: Wait Mutex */
		LOGGER_LOG("  %s\r\n", p_task_b_wait_mutex);
		xSemaphoreTake(h_mutex_mut_sem, portMAX_DELAY);

		/* Print out: Signal Mutex */
		LOGGER_LOG("  %s\r\n", p_task_b_signal_mutex);
		xSemaphoreGive(h_mutex_mut_sem);

		/* Update Task A & B Counter */
		g_tasks_cnt--;

		/* Print out: Task A & B Counter*/
		LOGGER_LOG("  %s %d\r\n", p_task_b_g_tasks_cnt, (int)g_tasks_cnt);

		/* Check Task A & B Counter and Set Task B Flag */
		if ((G_TASKS_CNT_MAX - 1) == g_tasks_cnt)
		{
			/* Set Task B Flag */
			task_b_flag = true;
		}

		/* Check Task B Flag, Reset Task B Flag and Do it here */
		if (true == task_b_flag)
		{
			/* Reset Task B Flag */
			task_b_flag = false;

			/* Do it here */

		}
